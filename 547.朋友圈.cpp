/*
 * @lc app=leetcode.cn id=547 lang=cpp
 *
 * [547] 朋友圈

    班上有 N 名学生。其中有些人是朋友，有些则不是。他们的友谊具有是传递性。如果已知 A 是 B 的朋友，B 是 C 的朋友，那么我们可以认为 A 也是 C 的朋友。所谓的朋友圈，是指所有朋友的集合。

    给定一个 N * N 的矩阵 M，表示班级中学生之间的朋友关系。如果M[i][j] = 1，表示已知第 i 个和 j 个学生互为朋友关系，否则为不知道。你必须输出所有学生中的已知的朋友圈总数。

    示例 1:

    输入: 
    [[1,1,0],
    [1,1,0],
    [0,0,1]]
    输出: 2 
    说明：已知学生0和学生1互为朋友，他们在一个朋友圈。
    第2个学生自己在一个朋友圈。所以返回2。
    示例 2:

    输入: 
    [[1,1,0],
     [1,1,1],
     [0,1,1]]
    输出: 1
    说明：已知学生0和学生1互为朋友，学生1和学生2互为朋友，所以学生0和学生2也是朋友，所以他们三个在一个朋友圈，返回1。
*/
/*  过程分析
    [[1,0,0,1],      1→   [[1,0,0,1],
     [0,1,1,0],      4→    [0,1,1,0],
     [0,1,1,1],      3→    [0,1,1,1],
     [1,0,1,1]]      2→    [1,0,1,1]]

 */
class Solution {
public:
    int findCircleNum(vector<vector<int>>& M) {
        int m = M.size(), cirNum = 0;
        vector<bool> vis(m, 0);
        // 遍历每行，即每个人
        for (int i = 0; i < m; i++) {
            if (!vis[i]) {
                cirNum++;
                DFS(M, i, m, vis);
            }
        }
        return cirNum;
    }
    
    void DFS(vector<vector<int>>& M, int i, int m, vector<bool>& vis) {
        //访问过的人标记为1，每个人都只有一个，不管行列
        vis[i] = 1; 
        // 遍历每行的每一列
        for (int j = 0; j < m; j++) {
            if (M[i][j] == 1 && !vis[j]) {
                DFS(M, j, m, vis);
            }
        }
    }
};

